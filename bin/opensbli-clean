#!/usr/bin/env python

#    OpenSBLI: An automatic code generator for solving differential equations.
#    Copyright (C) 2016 Satya P. Jammy, Christian T. Jacobs

#    This file is part of OpenSBLI.

#    OpenSBLI is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    OpenSBLI is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with OpenSBLI.  If not, see <http://www.gnu.org/licenses/>.

""" This script cleans out the (user-specified) OpenSBLI build directory.
Note that this might be a directory containing other files,
so let's selectively remove the files resulting from the build process,
rather than doing rm -rf *
"""

import os
import argparse
import glob

CODEGEN_FILES = ["*.cpp", "*.h", "*.f90"]
LATEX_FILES = ["equations.tex", "alg.tex", "*.aux", "*.log", "*.orig"]
PYTHON_FILES = ["*.pyc"]


def clean(directory_to_clean, include_generated_code=False):
    """ Removes the files generated by OpenSBLI in the build directory.

    :arg bool include_generated_code: If True, also remove the source files produced by the code generation process.
    """

    FILES = LATEX_FILES + PYTHON_FILES
    if include_generated_code:
        FILES += CODEGEN_FILES

    for f in FILES:
        expanded = glob.glob(directory_to_clean + "/" + f)  # Expand out any wildcards. e.g. *.aux, match all files ending in .aux.
        if expanded:
            for e in expanded:
                try:
                    os.remove(e)
                except OSError:
                    print "Could not remove file '%s'. Check permissions?"
                    pass
        else:
            # Just a single file.
            try:
                os.remove(f)
            except OSError:
                pass  # File doesn't exist, so just ignore this.
    return

if(__name__ == "__main__"):
    # Parse the command line arguments provided by the user
    parser = argparse.ArgumentParser(prog="opensbli-clean", description="Cleans the OpenSBLI build directory.")
    parser.add_argument("directory_to_clean", help="The path to the directory to clean.", action="store", type=str)
    parser.add_argument("-g", "--include-generated-code", help="Also remove generated Fortran/C source files.", action="store_true", default=False)
    args = parser.parse_args()

    clean(args.directory_to_clean, include_generated_code=args.include_generated_code)
